yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
################multiple linear regression
lm(qsec~mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec~mpg + disp + drat + wt + hp.data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp.data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,$year)#generate contingency table
################chi squared test contingency table
table(mpg$class,mpg$year)#generate contingency table
##chi squared test contingency table
table(mpg$class,mpg$year)#generate contingency table
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/srudd/bootcamp/MechaCar_Statistical_Analysis")
library(dplyr)
MechaCar <- read.csv('MecaCar_mpg.csv, check.names = F, stringsAsFactors = F)
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar <- read.csv('MecaCar_mpg.csv, check.names = F, stringsAsFactors = F)
inear Regression
lm(qsec~hp,mtcars)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar <- read.csv('MecaCar_mpg.csv, check.names = F, stringsAsFactors = F)
inear Regression
lm(qsec~hp,mtcars)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
mechacar(head)
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
mechacar(head)
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg~vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 7. Save your MechaCarChallenge.RScript file to your GitHub repository.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(total_summary)
lot_summary <- mecha_coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
lot_summary <- coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(lot_summary)
###  Deliverable 1 ###
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 7. Save your MechaCarChallenge.RScript file to your GitHub repository.
###  Deliverable 2 ###
### 1. Download the Suspension_Coil.csv file, and place it in the active directory for your R session.
### 2. In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil’s PSI column.
total_summary <- coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(total_summary)
### 4. Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to
###    group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s
###    PSI column.
lot_summary <- coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(lot_summary)
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
o your GitHub repository.
plt <- ggplot(lot_summary,aes(x=manufacturing_lot)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
library(ggplot2)
epository.
plt <- ggplot(lot_summary,aes(x=manufacturing_lot)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(lot_summary,aes(x=Manufacturing_Lot)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(psi,aes(x=Manufacturing_Lot)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(lot_summary,aes(x=psi)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(lot_summary,aes(x=PSI)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
View(lot_summary)
View(lot_summary)
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(coil,aes(x=PSI)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors=F)
demo_table2 <- fromJSON((txt='demo.json'))
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
demo_table4 <- read.csv('Vehicle_Data.xlsx',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
wide_table <- long_table %>% spread(key="Metric",value="Score")
################
################BASIC BAR PLOT
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
################BAR PLOT WITH FORMATTING
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a barplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
################LINE CHART
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
################SCATTER PLOT
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class,shape=drv)) #import dataset int ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive",scale_size_identity()) #add scatter plot with multiple aesthetics
################BASIC BOXPLOT
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
################BOXPLOT (SKILL DRILL)
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot27
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,)) #add boxplot and rotate x-axis labels 45 degrees
################HEAT MAP
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
################HEAT MAP (SKILL DRILL)
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #add heatmap with labels#rotate x-axis labels 90 degrees
################BOX PLOT
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
################SCATTER PLOT
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
################SCATTER PLOT
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
###############BOX PLOT
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
################BOX PLOT (SKILL DRILL)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
###############TEST THE DISTRIBUTION OF VEHICLE WIEGHTS (density plot)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
###############shapiro.test()#### Results W = 0.94326, p-value = 0.09265
shapiro.test(mtcars$wt)
###############visualize the distribution of driven miles for teh entire population data set
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
###############crate a sample data set using dplyr's sample_n() function
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import data set into ggplot2
plt + geom_density() #visualize distribution using density plot
############### One sided TTEST
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))#compare sample versus population means
####answer
##t = 1.2333, df = 49, p-value = 0.2234 alternative hypothesis: true mean is not equal to 4.39449 95 percent confidence interval:
###  4.344807 4.602033 sample estimates: mean of x 4.47342
############### Tow sided TTEST
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
############### Two Sample TTEST
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
############### anova
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
###############PEARSON
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import data set into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
## Used Cars
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
##Corelation Matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into a numeric matrix
cor(used_matrix)
################Linear Regression
lm(qsec~hp,mtcars) #create a linear model
################p-value and our r-squared value for a simple linear regression model
summary(lm(qsec~hp,mtcars)) #summarize linear model
##visualize the fitted line against our dataset
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
################multiple linear regression
lm(qsec~mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
################chi squared test contingency table
table(mpg$class,mpg$year)#generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
haCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(Manufacturing_Lot,aes(y-PSIt))
plt + geom_boxplot()
t file to your GitHub repository.
plt <- ggplot(Manufacturing_Lot,aes(y-PSI))
plt + geom_boxplot()
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(PSI,aes(y-Manufacturing_Lot))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot27
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(PSI,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,))
and read in the Suspension_Coil.csv file as a table.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
e your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(PSI,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,))
file to your GitHub repository.
plt <- ggplot(PSI,aes(x= Manufacturing_Lot,y=PSI))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,))
###  Deliverable 1 ###
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 7. Save your MechaCarChallenge.RScript file to your GitHub repository.
###  Deliverable 2 ###
### 1. Download the Suspension_Coil.csv file, and place it in the active directory for your R session.
### 2. In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(total_summary)
### 4. Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to
###    group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil's
###    PSI column.
lot_summary <- coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(lot_summary)
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
plt <- ggplot(PSI,aes(x= Manufacturing_Lot,y=PSI))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,))
plt <- ggplot(lot_summary,aes(x= Manufacturing_Lot,y=PSI))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1,))
your GitHub repository.
plt2 <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt2 + geom_boxplot()
plt2 <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt2 + geom_boxplot()
theme(axis.text.legend.position = "none") + xlab("Manufacturing Lot")
plt2 <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt2 + geom_boxplot()
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturing Lot")
plt2 <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt2 + geom_boxplot()
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturing Lot")
# EXTRA ###
plt2 <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt2 + geom_boxplot()
+ theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturing Lot")
### EXTRA ###
plt2 <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt2 + geom_boxplot()
theme(axis.text.x=element_text(angle=100,hjust=1)) + xlab("Manufacturing Lot")
plt <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot()
plt + geom_col() + xlab("Manufacturing Lots") + ylab("PSI")
plt <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot()
###  Deliverable 1 ###
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 7. Save your MechaCarChallenge.RScript file to your GitHub repository.
###  Deliverable 2 ###
### 1. Download the Suspension_Coil.csv file, and place it in the active directory for your R session.
### 2. In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(total_summary)
### 4. Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to
###    group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil's
###    PSI column.
lot_summary <- coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(lot_summary)
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
### EXTRA ###
plt <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot()
View(lot_summary)
View(lot_summary)
View(total_summary)
View(plt)
View(mechacar)
View(lot_summary)
View(coil)
t.test(coil$PSI,mu=1500)
### 2. Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
###    and its subset() argument to determine if the PSI for each manufacturing lot is statistically
###    different from the population mean of 1,500 pounds per square inch.
lot1<-subset(coil,Manufacturing_Lot=="Lot1")
lot1<-subset(coil,Manufacturing_Lot=="Lot1")
t.test(lot1$PSI,mu=1500)
###  Deliverable 1 ###
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 7. Save your MechaCarChallenge.RScript file to your GitHub repository.
###  Deliverable 2 ###
### 1. Download the Suspension_Coil.csv file, and place it in the active directory for your R session.
### 2. In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(total_summary)
### 4. Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to
###    group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil's
###    PSI column.
lot_summary <- coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(lot_summary)
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
### EXTRA ###
plt <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot()
### Deliverable 3 ###
### 1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine
###    if the PSI across all manufacturing lots is statistically different from the population
###    mean of 1,500 pounds per square inch.
t.test(coil$PSI,mu=1500)
### 2. Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
###    and its subset() argument to determine if the PSI for each manufacturing lot is statistically
###    different from the population mean of 1,500 pounds per square inch.
lot1<-subset(coil,Manufacturing_Lot=="Lot1")
t.test(lot1$PSI,mu=1500)
lot2<-subset(coil,Manufacturing_Lot=="Lot2")
t.test(lot2$PSI,mu=1500)
lot3<-subset(coil,Manufacturing_Lot=="Lot3")
t.test(lot3$PSI,mu=1500)
### 2. Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
###    and its subset() argument to determine if the PSI for each manufacturing lot is statistically
###    different from the population mean of 1,500 pounds per square inch.
t.test(subset(coil,Manufacturing_LOt=="Lot1")$PSI,mu=1500)
### 2. Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
###    and its subset() argument to determine if the PSI for each manufacturing lot is statistically
###    different from the population mean of 1,500 pounds per square inch.
t.test(subset(coil,Manufacturing_Lot=="Lot1")$PSI,mu=1500)
f 1,500 pounds per square inch.
t.test(subset(coil,Manufacturing_Lot=="Lot1")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot2")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot3")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot2")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot3")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot3")$PSI,mu=1500)
###  Deliverable 1 ###
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 7. Save your MechaCarChallenge.RScript file to your GitHub repository.
###  Deliverable 2 ###
### 1. Download the Suspension_Coil.csv file, and place it in the active directory for your R session.
### 2. In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
coil <- read.csv('Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(coil)
### 3. Write an RScript that creates a total_summary dataframe using the summarize() function to get the
###    mean, median, variance, and standard deviation of the suspension coil's PSI column.
total_summary <- coil %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Var_PSI=var(PSI),
Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(total_summary)
### 4. Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to
###    group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil's
###    PSI column.
lot_summary <- coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI),
Var_PSI=var(PSI), Std_Dev_PSI=sd(PSI), Num_Coil=n(), .groups = 'keep')
print(lot_summary)
### 5. Save your MechaCarChallenge.RScript file to your GitHub repository.
### EXTRA ###
plt <- ggplot(coil,aes(x=Manufacturing_Lot,y=PSI))
plt + geom_boxplot()
### Deliverable 3 ###
### 1. In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine
###    if the PSI across all manufacturing lots is statistically different from the population
###    mean of 1,500 pounds per square inch.
t.test(coil$PSI,mu=1500)
### 2. Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
###    and its subset() argument to determine if the PSI for each manufacturing lot is statistically
###    different from the population mean of 1,500 pounds per square inch.
t.test(subset(coil,Manufacturing_Lot=="Lot1")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot2")$PSI,mu=1500)
t.test(subset(coil,Manufacturing_Lot=="Lot3")$PSI,mu=1500)
### 3. Save your MechaCarChallenge.RScript file to your GitHub repository.
