> install.packages("tidyverse")
install.packages("tidyverse")
install.packages("jsonlite")
###############PEARSON
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import data set into ggplot2
plt + geom_point() #create scatter plot
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import data set into ggplot2
plt + geom_point() #create scatter plot
library(ggplot2)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import data set into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
setwd("C:/Users/srudd/bootcamp/MechaCar_Statistical_Analysis")
setwd("C:/Users/srudd/bootcamp/MechaCar_Statistical_Analysis")
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point()
cor(used_cars$Miles_Driven,used_cars$Seller_Price)
cor(used_cars$Miles_Driven,used_cars$Seller_Price)
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
rix
used_matrix <- as.matrix(used_cars[c,("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into a numeric matrix
cor(used_matrix)
used_matrix <- aes.matrix(used_cars[c,("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into a numeric matrix
cor(used_matrix)
used_matrix <- aes.matrix(used_cars[c,("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into a numeric matrix
cor(used_matrix)
##Corelation Matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into a numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into a numeric matrix
cor(used_matrix)
################Linear Regression
lm(qsec~hp,mtcars)
################p-value and our r-squared value for a simple linear regression model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec~hp,mtcars) #create a linear model
yvals <- model$coefficients["hp"]*mtcars$hp +
model$coefficents['(intercept)'] #determine y-axis values from linear model
model <- lm(qsec~hp,mtcars) #create a linear model
yvals <- model$coefficients["hp"]*mtcars$hp +
model$coefficents['(intercept)'] #determine y-axis values from linear model
plt <-ggplot(mtcars,aes(x=hp,y=qsec)) #import data set into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
################multiple linear regression
lm(qsec~mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec~mpg + disp + drat + wt + hp.data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp.data=mtcars)) #generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,$year)#generate contingency table
################chi squared test contingency table
table(mpg$class,mpg$year)#generate contingency table
##chi squared test contingency table
table(mpg$class,mpg$year)#generate contingency table
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/srudd/bootcamp/MechaCar_Statistical_Analysis")
library(dplyr)
MechaCar <- read.csv('MecaCar_mpg.csv, check.names = F, stringsAsFactors = F)
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar <- read.csv('MecaCar_mpg.csv, check.names = F, stringsAsFactors = F)
inear Regression
lm(qsec~hp,mtcars)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
MechaCar <- read.csv('MecaCar_mpg.csv, check.names = F, stringsAsFactors = F)
inear Regression
lm(qsec~hp,mtcars)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
mechacar(head)
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
mechacar(head)
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg~vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
### 1. Download the MechaCar_mpg.csv file, and place it in the active directory for your R session.
### 2. Create a new RScript in your R source pane, name it MechaCarChallenge.RScript, and save it to your active directory.
### 3. Use the library() function to load the dplyr package.
library(dplyr)
### 4. Import and read in the MechaCar_mpg.csv file as a dataframe.
mechacar <- read.csv('MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(mechacar)
### 5. Perform linear regression using the lm() function.
###    In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4
###    as the data parameter.
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar)
### 6. Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mechacar))
